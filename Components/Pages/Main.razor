@using MudBlazor
@using Microsoft.Maui.Storage
@using TexMergeApp.Services
@using TexMerge.Core.Enums
@using TexMerge.Core.Models
@inject IFolderPicker FolderPicker
@inject ITextureMerger TextureMerger

@page "/"
<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudGrid>
        <!-- Left Column -->
        <MudItem xs="6" md="5" lg="4" Style="min-width: 500px; min-height: 900px; height:900px">
            <MudPaper Class="pa-6" Elevation="2" Style="min-width: 500px; min-height: 900px; height:900px">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h5">Inputs</MudText>

                    <!-- Input folder group -->
                    <MudStack Spacing="1">
                        <MudTextField Label="Input folder"
                                      Value="@_inputFolder"
                                      ReadOnly="true"
                                      Variant="Variant.Outlined" />
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="SelectInputFolder">
                            Select Input Folder
                        </MudButton>
                    </MudStack>

                    <!-- Output folder group -->
                    <MudStack Spacing="1">
                        <MudTextField Label="Output folder"
                                      Value="@_outputFolder"
                                      ReadOnly="true"
                                      Variant="Variant.Outlined" />
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="SelectOutputFolder">
                            Select Output Folder
                        </MudButton>
                    </MudStack>

                    <MudTextField Label="File name" Variant="Variant.Outlined" @bind-Value="FileName" />

                    <MudDivider Class="my-2" />

                    @if (_isBusy)
                    {
                        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-2" />
                    }

                    <MudStack Row="true" Spacing="2">
                          <MudButton FullWidth="true"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Disabled="@_isBusy"
                               OnClick="MergeTextures">
                                @(_isBusy ? "Working..." : "Merge Textures")
                            </MudButton>

                            <MudButton FullWidth="true"
                               Variant="Variant.Filled"
                                   Color="Color.Success"
                               Disabled="@_isBusy"
                                   OnClick="PackTextures">
                                @(_isBusy ? "Working..." : "Pack Extra")
                            </MudButton>

                        <MudButton FullWidth="true"
                                   Variant="Variant.Filled"
                                   Color="Color.Secondary"
                                   Disabled="@(!_isBusy)"
                                   OnClick="StopCurrent">
                                   Stop
                        </MudButton>
                    </MudStack>


                    <MudExpansionPanels Class="my-2">
                        <MudExpansionPanel Text="Options">
                            <MudStack Row="true" Spacing="2">
                                <MudSwitch Label="Use Extra" @bind-Value="UseExtra" />
                                <MudSwitch Label="Pack Extra" @bind-Value="PackExtra" />
                                <MudSwitch Label="Replace Transparent" @bind-Value="ReplaceTransperent" />
                            </MudStack>
                        </MudExpansionPanel>
                    </MudExpansionPanels>

                </MudStack>
            </MudPaper>
        </MudItem>

        <!-- Right Column -->

        <MudItem xs="6" md="7" lg="8" Style="min-width: 500px; min-height: 900px; height:900px">
          <MudPaper Class="pa-6 d-flex flex-column" Elevation="2" Style="height:900px">
            <MudText Typo="Typo.h5" Class="mb-2">Log</MudText>
            @if (_isBusy)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-2" />
            }
            <MudPaper Class="pa-2" Elevation="0" Style="flex:1; overflow-y:auto;">
              <MudText Typo="Typo.body2" Style="white-space: pre-wrap;">
                @_logText
              </MudText>
            </MudPaper>
          </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    public bool UseExtra
    {
        get => _combineFlags.HasFlag(CombineFlags.UseExtra);
        set 
        { 
            _combineFlags = value ? _combineFlags | CombineFlags.UseExtra : _combineFlags & ~CombineFlags.UseExtra; 
			Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool PackExtra
    {
        get => _combineFlags.HasFlag(CombineFlags.PackExtra);
        set
        {
            _combineFlags = value ? _combineFlags | CombineFlags.PackExtra : _combineFlags & ~CombineFlags.PackExtra;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool ReplaceTransperent
    {
        get => _combineFlags.HasFlag(CombineFlags.ReplaceTransparent);
        set
        {
            _combineFlags = value ? _combineFlags | CombineFlags.ReplaceTransparent : _combineFlags & ~CombineFlags.ReplaceTransparent;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    private CombineFlags _combineFlags = CombineFlags.None;

    private string _inputFolder;
    private string _outputFolder;
    private string _logText = "Application started...\n";
    private bool _isBusy = false;
    private CancellationTokenSource _cancellationTokenSource;

    private string _fileName = "Resullt_";
    public string FileName
    {
        get => _fileName;
        set
        {
            if (_fileName == value) return;
            _fileName = value;
            Preferences.Set("LastFileName", value);
        }
    }

    protected override void OnInitialized()
    {
        // load last-used paths, or default to empty
        _inputFolder  = Preferences.Get("LastInputFolder",  string.Empty);
        _outputFolder = Preferences.Get("LastOutputFolder", string.Empty);
        _fileName = Preferences.Get("LastFileName",  "Resullt");
        _combineFlags = (CombineFlags)Preferences.Get("LastCombineFlags", (int)CombineFlags.None);

        if (string.IsNullOrWhiteSpace(_inputFolder))
        {
            _logText += "No input folder selected.\n";
        }
        else
        {
            _logText += $"Last input folder: {_inputFolder}\n";
        }

        if (string.IsNullOrWhiteSpace(_outputFolder))
        {
            _logText += "No output folder selected.\n";
        }
        else
        {
            _logText += $"Last output folder: {_outputFolder}\n";
        }
    }

    private async Task SelectInputFolder()
    {
        var path = await FolderPicker.PickFolderAsync();
        if (!string.IsNullOrWhiteSpace(path))
        {
            _inputFolder = path;
            Preferences.Set("LastInputFolder", path);
            _logText += $"Input folder: {path}\n";
        }
    }

    private async Task SelectOutputFolder()
    {
        var path = await FolderPicker.PickFolderAsync();
        if (!string.IsNullOrWhiteSpace(path))
        {
            _outputFolder = path;
            Preferences.Set("LastOutputFolder", path);
            _logText += $"Output folder: {path}\n";
        }
    }

    private async Task MergeTextures()
    {
        if (_isBusy) return;
        _isBusy = true;
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            TextureMerger.Options = GetCombineOptions();
            TextureMerger.SetLogger(Log);
            await TextureMerger.CombineAsync();
        }
        finally
        {
            _isBusy = false;
            _cancellationTokenSource = null;
        }
    }

    private async Task PackTextures()
    {
        if (_isBusy) return;
        _isBusy = true;
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
			TextureMerger.Options = GetCombineOptions();
            TextureMerger.SetLogger(Log);
            await TextureMerger.PackAsync();
        }
        finally
        {
            _isBusy = false;
            _cancellationTokenSource = null;
        }
    }

    private CombineOptions GetCombineOptions()
    {
        return new CombineOptions
        {
            InputPath = _inputFolder,
            OutputPath = _outputFolder,
            Name = FileName,
            CombineFlags = _combineFlags,
        };
    }

    private void StopCurrent()
    {
        if (_cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel();
            _logText += "-------------------------------------------------------Cancelled-----------------------------------------------------\n";
            _isBusy = false;
            _cancellationTokenSource = null;
        }
	}

    private void Log(string message)
    {
        _logText += $"{message}\n";
        //StateHasChanged(); // Ensure UI updates with new log entry
    }
}
