@using MudBlazor
@using Microsoft.Maui.Storage
@using System.Text
@using TexMergeApp.Services
@using TexMerge.Core.Enums
@using TexMerge.Core.Models
@inject IFolderPicker FolderPicker
@inject ITextureMerger TextureMerger

@page "/"
<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudStack Row="true" Spacing="4" Style="align-items: flex-start;">
        <!-- Left Column -->
        <MudPaper Class="pa-6" Elevation="2" Style="flex: none; width: 600px; height: 840px;">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Inputs</MudText>

                <!-- Input folder group -->
                <MudStack Spacing="1">
                    <MudTextField Label="Input Folder"
                                  Value="@_inputFolder"
                                  ReadOnly="true"
                                  Variant="Variant.Outlined" />
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="SelectInputFolder">
                        Select Input Folder
                    </MudButton>
                </MudStack>

                <!-- Output folder group -->
                <MudStack Spacing="1">
                    <MudTextField Label="Output Folder"
                                  Value="@_outputFolder"
                                  ReadOnly="true"
                                  Variant="Variant.Outlined" />
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="SelectOutputFolder">
                        Select Output Folder
                    </MudButton>
                </MudStack>

                <MudTextField Label="Name" Variant="Variant.Outlined" @bind-Value="FileName" />

                <MudDivider Class="my-2" />

                @if (_isBusy)
                {
                    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-2" />
                }

                <MudStack Row="true" Spacing="2">
                    <MudButton FullWidth="true"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Disabled="@_isBusy"
                               OnClick="MergeTextures">
                        @(_isBusy ? "Working..." : "Merge Textures")
                    </MudButton>

                    <MudButton FullWidth="true"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Disabled="@_isBusy"
                               OnClick="PackTextures">
                        @(_isBusy ? "Working..." : "Pack Extra")
                    </MudButton>

                    <MudButton FullWidth="true"
                               Variant="Variant.Filled"
                               Color="Color.Secondary"
                               Disabled="@(!_isBusy)"
                               OnClick="StopCurrent">
                        Stop
                    </MudButton>
                </MudStack>

                <MudExpansionPanels Class="my-2">
                    <MudExpansionPanel Text="Options">
                        <MudGrid GutterSize="2">
                            <MudItem xs="4">
                                <MudSwitch Label="Use Extra" @bind-Value="UseExtra" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Pack Extra" @bind-Value="PackExtra" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Fill Transparent" @bind-Value="ReplaceTransperent" Color="Color.Primary" Disabled="@JpgSave" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Save as Jpg" @bind-Value="JpgSave" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Base textures">
                        <MudGrid GutterSize="2">
                            <MudItem xs="4">
                                <MudSwitch Label="Roughness" @bind-Value="BaseMap_Roughness" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Metallic" @bind-Value="BaseMap_Metallic" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Ambient Occlusion" @bind-Value="BaseMap_AmbientOcclusion" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Normal DirectX" @bind-Value="BaseMap_NormalDX" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Normal OpenGL" @bind-Value="BaseMap_NormalOGL" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Normal" @bind-Value="BaseMap_Normal" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>

                    <MudExpansionPanel Text="Extra textures">
                        <MudGrid GutterSize="2">
                            <MudItem xs="4">
                                <MudSwitch Label="Height" @bind-Value="ExtraMap_Height" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Emissive" @bind-Value="ExtraMap_Emissive" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Diffuse" @bind-Value="ExtraMap_Diffuse" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Specular" @bind-Value="ExtraMap_Specular" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Glossiness" @bind-Value="ExtraMap_Glossiness" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Displacement" @bind-Value="ExtraMap_Displacement" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Refraction" @bind-Value="ExtraMap_Refraction" Color="Color.Primary" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSwitch Label="Reflection" @bind-Value="ExtraMap_Reflection" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>

                </MudExpansionPanels>

            </MudStack>
        </MudPaper>
        <!-- Right Column -->
        <MudItem Style="flex: none; width: 800px;">
            <MudPaper Class="pa-6" Elevation="2" Style="width: 800px; height: 840px; display: flex; flex-direction: column;">
                <MudText Typo="Typo.h5" Class="mb-2">Log</MudText>
                <!-- Scrollable log area without border -->
                <div style="flex: 1; overflow-y: auto; padding: 8px;">
                    <MudText Typo="Typo.body2" Style="white-space: pre-wrap;">
                        @_logText
                    </MudText>
                </div>
            </MudPaper>
        </MudItem>
    </MudStack>
</MudContainer>

@code {
    public bool UseExtra
    {
        get => _combineFlags.HasFlag(CombineFlags.UseExtra);
        set
        {
            _combineFlags = value ? _combineFlags | CombineFlags.UseExtra : _combineFlags & ~CombineFlags.UseExtra;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool PackExtra
    {
        get => _combineFlags.HasFlag(CombineFlags.PackExtra);
        set
        {
            _combineFlags = value ? _combineFlags | CombineFlags.PackExtra : _combineFlags & ~CombineFlags.PackExtra;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool ReplaceTransperent
    {
        get => _combineFlags.HasFlag(CombineFlags.ReplaceTransparent) || _combineFlags.HasFlag(CombineFlags.JpgSave);
        set
        {
            if(!value && _combineFlags.HasFlag(CombineFlags.JpgSave))
            {
                // If JpgSave is enabled, we cannot disable ReplaceTransparent
                return;
            }
            _combineFlags = value ? _combineFlags | CombineFlags.ReplaceTransparent : _combineFlags & ~CombineFlags.ReplaceTransparent;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool JpgSave
    {
        get => _combineFlags.HasFlag(CombineFlags.JpgSave);
        set
        {
            if (value && !_combineFlags.HasFlag(CombineFlags.ReplaceTransparent))
            {
                _combineFlags = value ? _combineFlags | CombineFlags.ReplaceTransparent : _combineFlags & ~CombineFlags.ReplaceTransparent;
            }
            _combineFlags = value ? _combineFlags | CombineFlags.JpgSave : _combineFlags & ~CombineFlags.JpgSave;
            Preferences.Set("LastCombineFlags", (int)_combineFlags);
        }
    }

    public bool BaseMap_Roughness
    {
        get => _baseMaps.HasFlag(BaseMaps.Roughness);
        set => UpdateFlag(ref _baseMaps, BaseMaps.Roughness, value, "LastBaseMaps");
    }

    public bool BaseMap_Metallic
    {
        get => _baseMaps.HasFlag(BaseMaps.Metallic);
        set => UpdateFlag(ref _baseMaps, BaseMaps.Metallic, value, "LastBaseMaps");
    }

    public bool BaseMap_AmbientOcclusion
    {
        get => _baseMaps.HasFlag(BaseMaps.AmbientOcclusion);
        set => UpdateFlag(ref _baseMaps, BaseMaps.AmbientOcclusion, value, "LastBaseMaps");
    }

    public bool BaseMap_NormalDX
    {
        get => _baseMaps.HasFlag(BaseMaps.NormalDX);
        set => UpdateFlag(ref _baseMaps, BaseMaps.NormalDX, value, "LastBaseMaps");
    }

    public bool BaseMap_NormalOGL
    {
        get => _baseMaps.HasFlag(BaseMaps.NormalOGL);
        set => UpdateFlag(ref _baseMaps, BaseMaps.NormalOGL, value, "LastBaseMaps");
    }

    public bool BaseMap_Normal
    {
        get => _baseMaps.HasFlag(BaseMaps.Normal);
        set => UpdateFlag(ref _baseMaps, BaseMaps.Normal, value, "LastBaseMaps");
    }

    public bool ExtraMap_Height { get => _extraMaps.HasFlag(ExtraMaps.Height); set => UpdateFlag(ref _extraMaps, ExtraMaps.Height, value, "LastExtraMaps"); }
    public bool ExtraMap_Emissive { get => _extraMaps.HasFlag(ExtraMaps.Emissive); set => UpdateFlag(ref _extraMaps, ExtraMaps.Emissive, value, "LastExtraMaps"); }
    public bool ExtraMap_Diffuse { get => _extraMaps.HasFlag(ExtraMaps.Diffuse); set => UpdateFlag(ref _extraMaps, ExtraMaps.Diffuse, value, "LastExtraMaps"); }
    public bool ExtraMap_Specular { get => _extraMaps.HasFlag(ExtraMaps.Specular); set => UpdateFlag(ref _extraMaps, ExtraMaps.Specular, value, "LastExtraMaps"); }
    public bool ExtraMap_Glossiness { get => _extraMaps.HasFlag(ExtraMaps.Glossiness); set => UpdateFlag(ref _extraMaps, ExtraMaps.Glossiness, value, "LastExtraMaps"); }
    public bool ExtraMap_Displacement { get => _extraMaps.HasFlag(ExtraMaps.Displacement); set => UpdateFlag(ref _extraMaps, ExtraMaps.Displacement, value, "LastExtraMaps"); }
    public bool ExtraMap_Refraction { get => _extraMaps.HasFlag(ExtraMaps.Refraction); set => UpdateFlag(ref _extraMaps, ExtraMaps.Refraction, value, "LastExtraMaps"); }
    public bool ExtraMap_Reflection { get => _extraMaps.HasFlag(ExtraMaps.Reflection); set => UpdateFlag(ref _extraMaps, ExtraMaps.Reflection, value, "LastExtraMaps"); }

    private void UpdateFlag<T>(ref T flags, T value, bool enabled, string preferenceKey) where T : Enum
    {
        if (enabled)
            flags = (T)(object)(((int)(object)flags) | ((int)(object)value));
        else
            flags = (T)(object)(((int)(object)flags) & ~((int)(object)value));

        Preferences.Set(preferenceKey, (int)(object)flags);
    }

    private CombineFlags _combineFlags = CombineFlags.None;
    private BaseMaps _baseMaps = BaseMaps.All;
    private ExtraMaps _extraMaps = ExtraMaps.All;

    private string _inputFolder;
    private string _outputFolder;
    private string _logText = "Application started...\n";
    private bool _isBusy = false;
    private CancellationTokenSource _cancellationTokenSource;

    private string _fileName = "Resullt_";
    public string FileName
    {
        get => _fileName;
        set
        {
            if (_fileName == value) return;
            _fileName = value;
            Preferences.Set("LastFileName", value);
        }
    }

    protected override void OnInitialized()
    {
		_logText += GetStartText();
        PrintBaseOptions();
        _inputFolder = Preferences.Get("LastInputFolder", string.Empty);
        _outputFolder = Preferences.Get("LastOutputFolder", string.Empty);
        _fileName = Preferences.Get("LastFileName", "Resullt");
        _combineFlags = (CombineFlags)Preferences.Get("LastCombineFlags", (int)CombineFlags.None);
        _baseMaps = (BaseMaps)Preferences.Get("LastBaseMaps", (int)BaseMaps.All);
        _extraMaps = (ExtraMaps)Preferences.Get("LastExtraMaps", (int)ExtraMaps.All);
    }

    private async Task SelectInputFolder()
    {
        var path = await FolderPicker.PickFolderAsync();
        if (!string.IsNullOrWhiteSpace(path))
        {
            _inputFolder = path;
            Preferences.Set("LastInputFolder", path);
            _logText += $"Input folder: {path}\n";
        }
    }

    private async Task SelectOutputFolder()
    {
        var path = await FolderPicker.PickFolderAsync();
        if (!string.IsNullOrWhiteSpace(path))
        {
            _outputFolder = path;
            Preferences.Set("LastOutputFolder", path);
            _logText += $"Output folder: {path}\n";
        }
    }

    private async Task MergeTextures()
    {
        if (_isBusy) return;
        _isBusy = true;
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            TextureMerger.Options = GetCombineOptions();
            TextureMerger.SetLogger(Log);
            await TextureMerger.CombineAsync();
        }
        finally
        {
            _isBusy = false;
            _cancellationTokenSource = null;
        }
    }

    private async Task PackTextures()
    {
        if (_isBusy) return;
        _isBusy = true;
        _cancellationTokenSource = new CancellationTokenSource();

        try
        {
            TextureMerger.Options = GetCombineOptions();
            TextureMerger.SetLogger(Log);
            await TextureMerger.PackAsync();
        }
        finally
        {
            _isBusy = false;
            _cancellationTokenSource = null;
        }
    }

    private CombineOptions GetCombineOptions()
    {
        Preferences.Set("LastBaseMaps", (int)_baseMaps);
        Preferences.Set("LastExtraMaps", (int)_extraMaps);

        return new CombineOptions
        {
            InputPath = _inputFolder,
            OutputPath = _outputFolder,
            Name = FileName,
            CombineFlags = _combineFlags,
            BaseMaps = _baseMaps,
            ExtraMaps = _extraMaps,
        };
    }

    private void StopCurrent()
    {
        if (_cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel();
            _logText += "-------------------------------------------------------Cancelled-----------------------------------------------------\n";
            _isBusy = false;
            _cancellationTokenSource = null;
        }
    }

    private void PrintBaseOptions()
    {
        Log("----------------------------------------------------Base maps:---------------------------------------------------");
        PrintOptionSet("Base color", Constants.Color);
        PrintOptionSet("Roughness", Constants.Roughness);
        PrintOptionSet("Metallic", Constants.Metallic);
        PrintOptionSet("Ambient Occlusion", Constants.Ao);
        PrintOptionSet("Normal DirectX", Constants.NormalDX);
        PrintOptionSet("Normal OpenGL", Constants.NormalOGL);
        PrintOptionSet("Normal", Constants.Normal);
        Log("");
        Log("---------------------------------------------------Extra maps:---------------------------------------------------");
        PrintOptionSet("Height", Constants.Height);
        PrintOptionSet("Emissive", Constants.Emissive);
        PrintOptionSet("Diffuse", Constants.Diffuse);
        PrintOptionSet("Specular", Constants.Specular);
        PrintOptionSet("Glossiness", Constants.Glossiness);
        PrintOptionSet("Displacement", Constants.Displacement);
        PrintOptionSet("Index Of Refraction", Constants.Refraction);
        PrintOptionSet("Reflection", Constants.Reflection);
        Log("----------------------------------------------------------------------------------------------------------------------");
        Log("");

    }

    private void PrintOptionSet(string name, string[] options)
    {
        if (string.IsNullOrEmpty(name)) { return; }
        if (options == null || options.Length == 0) { return; }

        var str = new StringBuilder();
        str.Append(name);
        str.Append(": ");
        foreach (var option in options)
        {
            str.Append(option);
            str.Append(",");
        }
        Log(str.ToString());
        str.Clear();
    }

    private void Log(string message)
    {
        _logText += $"{message}\n";
    }

    private string GetStartText()
    {
        var introText =
    "\nTexMergeApp: A desktop tool for combining texture maps into optimized PBR packs.\n" +
    "Supports merging AO, Roughness, and Metallic into a single texture.\n" +
    "Packing and merging results are saved in the selected Output Folder.\n\n" +
    "\"Pack Extra\" creates an additional packed texture where:\n" +
    "- Red channel: Ambient Occlusion\n" +
    "- Green channel: Roughness\n" +
    "- Blue channel: Metallic\n\n" +
    "Options:\n" +
    "- Use Extra: Enables inclusion of additional maps during merging.\n" +
    "- Pack Extra: Enables creation of the extra packed texture with AO/Roughness/Metallic.\n" +
    "- Fill Transparent: Replaces fully transparent pixels with a solid fallback before merging.\n" +
    "- Save as JPG: Saves output as JPG instead of PNG (transparency will be discarded).\n\n";
        return introText;
    }
}
